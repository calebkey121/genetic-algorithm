This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
genetic_algorithm.cpp
genetic_algorithm.h
LICENSE
README.md

================================================================
Files
================================================================

================
File: genetic_algorithm.cpp
================
#include "genetic_algorithm.h"

using namespace std;

/***********************************************************************************************************/
/********************************************************************************************
Uniform Crossover
Mates: This crossover requires two parents
Pick Order: A binary number, with length equaling the number of genes, will direct each gene
            to its designated offspring; with '0' representing the first mate's gene, and '1' 
            representing the other
Offspring: This operation produces 2 offspring, one following the exact pick order, and the
           other following the exact opposite of the pick order
Example:
Mates: 'Hello' | 'Piano'
Pick Order: 11001
Offspring: 'Pillo' | 'Heano'
*********************************************************************************************/
pair<Genome, Genome> Genome::UX(Genome mate){
    // Pseudo: Determine the reigons for inheritance
    //         Generate a random number to determine crossover
    //         Assign offspring gene based on probability - parent A, B, or mutate
               
    pair<bitset<SOLUTION_SIZE>, bitset<SOLUTION_SIZE>> offspringBitsets;

    // Reigons for inheritance
    float parentRangeA = (1 - MUTATION_CHANCE/100) / 2; // this parent (A)
    float parentRangeB = 1 - MUTATION_CHANCE/100; // mate (B)

    for (int i = 0; i < SOLUTION_SIZE; i++){
        float p = Tools::randRange(0, 100) / 100;

        if (p < parentRangeA){
            offspringBitsets.first[i] = Chromosome[i];
            offspringBitsets.second[i] = mate.Chromosome[i];
        }
        else if (p < parentRangeB){
            offspringBitsets.first[i] = mate.Chromosome[i];
            offspringBitsets.second[i] = Chromosome[i];
        }
        else { // Mutate
            offspringBitsets.first[i] = Tools::randChar();
            offspringBitsets.second[i] = Tools::randChar();
        }
    }
    pair<Genome, Genome> offspring = make_pair(Genome(offspringBitsets.first, addressVector), Genome(offspringBitsets.second, addressVector));

    return offspring;
};

/********************************************************************************************
Crossover Operation - This example will use 'Uniform Crossover'
Mates: This crossover requires two parents
Pick Order: 
Offspring: 
*********************************************************************************************/
pair<Genome, Genome> Genome::TWOPX(Genome mate){
    // https://stackoverflow.com/questions/7145583/two-point-crossover-operation
    // Pseudo: Determine two distinct random gene locations
    //         Generate a random number to determine crossover
    //         Assign offspring gene based on probability - parent A, B, or mutate
               
    pair<bitset<SOLUTION_SIZE>, bitset<SOLUTION_SIZE>> offspringBitsets;
    float mutationChance = 1 - MUTATION_CHANCE/100;

    // Generate two distinct random locations, making sure that B > A
    int randLocationA = rand() % SOLUTION_SIZE;
    int randLocationB = rand() % SOLUTION_SIZE;
    while (randLocationA == randLocationB or randLocationA > randLocationB) {
        randLocationA = rand() % SOLUTION_SIZE;
        randLocationB = rand() % SOLUTION_SIZE;
    }
    for (int i = 0; i < randLocationA; i++){
        float p = Tools::randRange(0, 100) / 100;
        if (p < mutationChance){
            offspringBitsets.first[i] = Chromosome[i];
            offspringBitsets.second[i] = mate.Chromosome[i];
        }
        else {
            offspringBitsets.first[i] = Tools::randChar();
            offspringBitsets.second[i] = Tools::randChar();
        }
    }
    for (int i = randLocationA; i < randLocationB; i++){
        float p = Tools::randRange(0, 100) / 100;
        if (p < mutationChance){
            offspringBitsets.second[i] = Chromosome[i];
            offspringBitsets.first[i] = mate.Chromosome[i];
        }
        else {
            offspringBitsets.first[i] = Tools::randChar();
            offspringBitsets.second[i] = Tools::randChar();
        }
    }
    for (int i = randLocationB; i < SOLUTION_SIZE; i++){
        float p = Tools::randRange(0, 100) / 100;
        if (p < mutationChance){
            offspringBitsets.first[i] = Chromosome[i];
            offspringBitsets.second[i] = mate.Chromosome[i];
        }
        else {
            offspringBitsets.first[i] = Tools::randChar();
            offspringBitsets.second[i] = Tools::randChar();
        }
    }

    pair<Genome, Genome> offspring = make_pair(Genome(offspringBitsets.first, addressVector), Genome(offspringBitsets.second, addressVector));

    return offspring;
};

/********************************************************************************************
Crossover Operation - This example will use 'Uniform Crossover'
Mates: This crossover requires two parents
Pick Order: 
Offspring: 
*********************************************************************************************/
pair<Genome, Genome> Genome::SX(Genome mate){
    // 
    // Pseudo: 
               
    pair<bitset<SOLUTION_SIZE>, bitset<SOLUTION_SIZE>> offspringBitsets;

    // Reigons for inheritance
    float mutationChance = 1 - MUTATION_CHANCE/100;
    float segmentationChance = mutationChance - (1 - SEG_X_CHANCE/100); // this parent (A)

    bool switchParents = false;
    for (int i = 0; i < SOLUTION_SIZE; i++){
        float p = Tools::randRange(0, 100) / 100;

        if (p < segmentationChance){
            if (switchParents){
                offspringBitsets.second[i] = mate.Chromosome[i];
                offspringBitsets.first[i] = Chromosome[i];
            }
            else {
                offspringBitsets.first[i] = mate.Chromosome[i];
                offspringBitsets.second[i] = Chromosome[i];
            }
        }
        else if (p < mutationChance){ // Segmentation
            switchParents = !switchParents;
            if (switchParents){
                offspringBitsets.second[i] = mate.Chromosome[i];
                offspringBitsets.first[i] = Chromosome[i];
            }
            else {
                offspringBitsets.first[i] = mate.Chromosome[i];
                offspringBitsets.second[i] = Chromosome[i];
            }
        }
        else { // Mutate
            offspringBitsets.first[i] = Tools::randChar();
            offspringBitsets.second[i] = Tools::randChar();
        }
    }

    pair<Genome, Genome> offspring = make_pair(Genome(offspringBitsets.first, addressVector), Genome(offspringBitsets.second, addressVector));

    return offspring;
};

/********************************************************************************************
Crossover Operation - This example will use 'Uniform Crossover'
Mates: This crossover requires two parents
Pick Order: 
Offspring: 
*********************************************************************************************/
pair<Genome, Genome> Genome::BAX(Genome mate){
    // 
    // Pseudo: 

    int i = SOLUTION_SIZE - 1;
    bool parentABit = Chromosome[i];
    bool parentBBit = mate.Chromosome[i];
    if (parentABit != parentBBit){
        float p = Tools::randRange(0, 100) / 100;
        if (p < 0.5){
            return this->UX(mate);
        }
        else {
            return this->TWOPX(mate);
        }
    }
    else if (parentABit == true){
        return this->UX(mate);
    }
    else {
        return this->TWOPX(mate);
    }
};

// Fittness score = the number of characters in string which differ from target
// The lower, the better score
int Genome::cal_fitness(){
    int fitness = 0;
    
    LRUCache cache;
    bitset<3> index;
    for (int i = 0; i < 100; i++){
        index[0] = Chromosome[i * 3];
        index[1] = Chromosome[(i * 3) + 1];
        index[2] = Chromosome[(i * 3) + 2];
        cache.index((int)index.to_ulong(), addressVector.at(i));
    }
 
    fitness = cache.getEvictionCount();

    return fitness;    
};

// Overloading < operator - will help when we sort the population by fitness
bool Genome::operator<(const Genome& GenomeB)
{
    return Fitness < GenomeB.Fitness;
};
/***********************************************************************************************************/

/***********************************************************************************************************/
void GenAlg::runWithOF(){

    output.open(crossoverType + "_GA_Solution/GA Solution - " + Name + ".txt");
    output << "*******Solution - " + Name + "*******" << endl;

    currentGen = 0;
    solutionFound = false;
    // Initial Population
    for (int i = 0; i < POP_SIZE; i++){
        string genomeString = Tools::newGenome();
        bitset<SOLUTION_SIZE> genome(genomeString);
        population.push_back(Genome(genome, addressVector));
    }

    bool convergence = false;
    int convergenceCounter = 0;
    int previousFitness = 0;
    while(!solutionFound and convergence == false){
        output << "Fitness: " + to_string(population.at(0).Fitness) + "\n";
        output << "ConvergenceCounter: " + to_string(convergenceCounter) + "\n";
        sort(population.begin(), population.end());

        // check if target has been found
        if (population.front().Fitness == 0 || currentGen == MAX_GEN){
            solutionFound = true;
            break;
        }

        // Case - No Solution
        vector<Genome> newPopulation;
        // Calculate Elitism
        int elitismRange = (ELITISM_PERCENTAGE * POP_SIZE) / 100;
        for(int i = 0; i < elitismRange; i++){
            newPopulation.push_back(population.at(i));
        }

        // Selection Process - Random for now
        int remainingRange = POP_SIZE - elitismRange; // remaining portion of pop
        for(int i = 0; i < remainingRange; i+=2){ // Each iteration generates two offspring
            Genome parentA = population.at(Tools::randRange(0, 50));
            Genome parentB = population.at(Tools::randRange(0, 50));
            pair<Genome, Genome> offspring = parentA.UX(parentB);

            if (crossoverType == "UX") offspring = parentA.UX(parentB);
            else if (crossoverType == "2PX") offspring = parentA.TWOPX(parentB);
            else if (crossoverType == "SX") offspring = parentA.SX(parentB);
            else if (crossoverType == "BAX") offspring = parentA.BAX(parentB);
            else {
                printf("ERROR: No valid crossover selected");
                exit(1);
            }

            newPopulation.push_back(offspring.first);
            if (newPopulation.size() == POP_SIZE) break; // check if second offspring is necessary
            newPopulation.push_back(offspring.second);
        }

        // Check for convergence
        if (previousFitness == population.at(0).Fitness) convergenceCounter++;
        else {
            convergenceCounter = 0;
        }
        previousFitness = population.at(0).Fitness;

        if (convergenceCounter == CONVERGENCE_ALLOWENCE) convergence = true;

        // Replace old population
        population = newPopulation;

        // Advance Generation
        currentGen++;

    }

    // Write solution to output file
    output << displaySolution();
    output << "*******Solution - " + Name + "*******" << endl;
    LRUCache::simulateCache(Name, crossoverType, population.at(0).Chromosome, population.at(0).addressVector);
    output.close();
    solFitness = population.at(0).Fitness;
};

void GenAlg::run(){

    currentGen = 0;
    solutionFound = false;
    // Initial Population
    for (int i = 0; i < POP_SIZE; i++){
        string genomeString = Tools::newGenome();
        bitset<SOLUTION_SIZE> genome(genomeString);
        population.push_back(Genome(genome, addressVector));
    }

    bool convergence = false;
    int convergenceCounter = 0;
    int previousFitness = 0;
    while(!solutionFound and convergence == false){
        sort(population.begin(), population.end());

        // check if target has been found
        if (population.front().Fitness == 0 || currentGen == MAX_GEN){
            solutionFound = true;
            break;
        }

        // Case - No Solution
        vector<Genome> newPopulation;
        // Calculate Elitism
        int elitismRange = (ELITISM_PERCENTAGE * POP_SIZE) / 100;
        for(int i = 0; i < elitismRange; i++){
            newPopulation.push_back(population.at(i));
        }

        // Selection Process - Random for now
        int remainingRange = POP_SIZE - elitismRange; // remaining portion of pop
        for(int i = 0; i < remainingRange; i+=2){ // Each iteration generates two offspring
            Genome parentA = population.at(Tools::randRange(0, 50));
            Genome parentB = population.at(Tools::randRange(0, 50));
            pair<Genome, Genome> offspring = parentA.UX(parentB);

            if (crossoverType == "UX") offspring = parentA.UX(parentB);
            else if (crossoverType == "2PX") offspring = parentA.TWOPX(parentB);
            else if (crossoverType == "SX") offspring = parentA.SX(parentB);
            else if (crossoverType == "BAX") offspring = parentA.BAX(parentB);
            else {
                printf("ERROR: No valid crossover selected");
                exit(1);
            }

            newPopulation.push_back(offspring.first);
            if (newPopulation.size() == POP_SIZE) break; // check if second offspring is necessary
            newPopulation.push_back(offspring.second);
        }


        // Check for convergence
        if (previousFitness == population.at(0).Fitness) convergenceCounter++;
        else {
            convergenceCounter = 0;
        }
        previousFitness = population.at(0).Fitness;

        if (convergenceCounter == CONVERGENCE_ALLOWENCE) convergence = true;

        // Replace old population
        population = newPopulation;

        // Advance Generation
        currentGen++;

    }
    solFitness = population.at(0).Fitness;
};

string GenAlg::displayPop(){
    string returnPop;
    returnPop += ("Generation: " + to_string(currentGen) + "\n");
    for (int i = 0; i < population.size(); i++){
        returnPop += (population.at(i).Chromosome.to_string() + "\n");
    }
    returnPop += ("Best Solution: " + population.at(0).Chromosome.to_string() + "\n");
    returnPop += ("Fitness: " + to_string(population.at(0).Fitness) + "\n");
    returnPop += ("**************************************************************\n");
    return returnPop;
};

string GenAlg::displaySolution(){
    string returnPop;
    returnPop += ("Generation: " + to_string(currentGen) + "\n");
    returnPop += ("Best Solution: " + population.at(0).Chromosome.to_string() + "\n");
    returnPop += ("Fitness: " + to_string(population.at(0).Fitness) + "\n");
    return returnPop;
};

/***********************************************************************************************************/

/***********************************************************************************************************/
int Tools::randRange(int min, int max){
    // Returns a random integer given a range
    
    int range = max - min + 1;
    return (rand() % range) + min;
};

char Tools::randChar(){
    // returns a random charater within the gene pool

    return (genes[randRange(0, genes.length() - 1)]);
};

string Tools::newGenome(){
    // Create a random new Genome

    string genome = "";
    for (int i = 0; i < SOLUTION_SIZE; i++){
        genome += randChar();
    }
    return genome;
};

string Tools::addressToHex(bitset<ADDRESS_SIZE> address){
    stringstream ss;
    bitset<4> bit_to_hex;
    for (int i = 0; i < (ADDRESS_SIZE / 4); i++){
        bit_to_hex[0] = address[i];
        bit_to_hex[1] = address[i + 1];
        bit_to_hex[2] = address[i + 2];
        bit_to_hex[3] = address[i + 3];
        ss << hex <<  bit_to_hex.to_ulong();
    }
    return ss.str();
}

void Tools::displayAddressVector(vector<bitset<ADDRESS_SIZE>> addressVector){
    cout << "<";
        for (int i = 0; i < addressVector.size(); i++){
            cout << addressToHex(addressVector.at(i)) << ", ";
        }
    cout << ">" << endl;
}

vector<bitset<ADDRESS_SIZE>> Tools::randAddressVector(){
    // Generating 100 random 32-bit Addresses
    srand(time(NULL));
    bitset<ADDRESS_SIZE> bits;
    double p = 0.5;
    random_device rd;
    mt19937 gen(rd());
    bernoulli_distribution d(p);
    vector<bitset<ADDRESS_SIZE>> subVector;
    vector<bitset<ADDRESS_SIZE>> addressVector;
    for (int i = 0; i < 4; i++){
        while (subVector.size() != 25){
            for( int n = 0; n < ADDRESS_SIZE; ++n) {
                bits[n] = d(gen);
            }

            // This populates the vector with repeat addresses to simulate a cache line thatt likely calls an address multiple times
            int repeat = rand() % 10 + 1;

            if (repeat > (25 - subVector.size())){
                repeat = 25 - subVector.size();
            }
            
            for(int i = 0; i < repeat; i ++){
                subVector.push_back(bits);
            }

        }
        // duplicate addresses should be shuffled
        auto rng = default_random_engine {};
        shuffle(begin(subVector), end(subVector), rng);
        //Tools::displayAddressVector(subVector);
        for (int s = 0; s < 25; s++){
            addressVector.push_back(subVector.at(s));
        }
        subVector.clear();
    }

    return addressVector;
}

void Tools::runGA(vector<bitset<ADDRESS_SIZE>> addressVector, string crossoverType, string output){
    int GAFitness = 0;
    int GAGen = 0;
    float numExecutions = NUM_EXECUTIONS;
    string GAName;
    vector<int> fitness;
    vector<int> generations;
    ofstream results;

    // Delete Previous Directories
    // create new directory
    string folderName = crossoverType + "_GA_Solution";
    char dirName[folderName.length()+1];
    strcpy(dirName, folderName.c_str());
    mkdir(dirName);
    
    folderName = crossoverType + "_Simulation";
    strcpy(dirName, folderName.c_str());
    mkdir(dirName);
    
    folderName = "Results";
    strcpy(dirName, folderName.c_str());
    mkdir(dirName);


    results.open("Results/" + crossoverType + "_Results.txt");
    for(int i = 0; i < numExecutions; i++){
        results << "*******************" << endl;
        cout << "*******************" << endl;
        cout << crossoverType << endl;
        
        GAName = "GA" + to_string(i + 1);
        GenAlg newAlg(GAName, addressVector, crossoverType);

        cout << GAName << " is running..." << endl;
        if (output == "YES") newAlg.runWithOF();
        else newAlg.run();
        GAFitness = newAlg.getFitness();
        results << GAName << " # of Evictions: " << to_string(GAFitness) << endl;
        GAGen = newAlg.getGen()  - CONVERGENCE_ALLOWENCE;
        results << GAName << " # of Generations to Convergence: " << to_string(GAGen) << endl;
        cout << GAName << " Complete!" << endl << endl;

        fitness.push_back(GAFitness);
        generations.push_back(GAGen);
    }

    // Calculate Min, Max, Average
    int worstFitness, bestFitness, worstGen, bestGen;
    sort(fitness.begin(), fitness.end());
    sort(generations.begin(), generations.end());

    bestFitness = fitness.front();
    worstFitness = fitness.back();
    bestGen = generations.front();
    worstGen = generations.back();

    float totalFitness = accumulate(fitness.begin(), fitness.end(), 0.0);
    float totalGens = accumulate(generations.begin(), generations.end(), 0.0);

    float avgFitness = totalFitness / numExecutions;
    float avgGen = totalGens / numExecutions;

    results << "*******************" << endl;
    results << "Best Fitness: " << bestFitness << endl;
    results << "Worst Fitness: " << worstFitness << endl;
    results << "Average Fitness: " << avgFitness << endl;
    results << "Most # of Generation to Converge: " << worstGen << endl;
    results << "Least # of Generation to Converge: " << bestGen << endl;
    results << "Average # of Generations to Converge: " << avgGen << endl;
    results.close();
}
/***********************************************************************************************************/

/***********************************************************************************************************/
// Declare the size
LRUSet::LRUSet()
{
    size = 2;
}
 
// Refers key x with in the LRU cache | returns true if resulted in an eviction
bool LRUSet::refer(bitset<ADDRESS_SIZE> x)
{
    bool eviction = false;
    // not present in cache
    if (cacheMapping.find(x) == cacheMapping.end()) {
        // cache is full
        if (set.size() == size) { // EVICTION
            eviction = true;
            // delete least recently used element
            bitset<ADDRESS_SIZE> last = set.back();
 
            // Pops the last element
            set.pop_back();
 
            // Erase the last
            cacheMapping.erase(last);
        }
    }
 
    // present in cache
    else
        set.erase(cacheMapping[x]);
 
    // update reference
    set.push_front(x);
    cacheMapping[x] = set.begin();

    return eviction;
}
 
// Function to display contents of cache
string LRUSet::display()
{
 
    // Iterate in the deque and print
    // all the elements in it
    stringstream ss;

    if (set.size() == 0){
        ss << "| -------- | -------- | ";
    }
    else if (set.size() == 1){
        ss << "| " << Tools::addressToHex(set.front()) << " | -------- | ";
    }
    else{
        ss << "| " << Tools::addressToHex(set.front()) << " | " << Tools::addressToHex(set.back()) << " | ";
    }

    ss << endl;
    return ss.str();
}
/***********************************************************************************************************/

/***********************************************************************************************************/
LRUCache::LRUCache(){
    
}

int LRUCache::getEvictionCount(){
    return evictionCount;
}

string LRUCache::display(){
    stringstream ss;
    for (int i = 0; i < 8; i++) ss << setArray[i].display();
    ss << "Eviction Count: " << evictionCount << endl;
    return ss.str();
}

void LRUCache::index(int set, bitset<ADDRESS_SIZE> value){
    if (setArray[set].refer(value)){
        evictionCount++;
    }
}

void LRUCache::simulateCache(string name, string crossoverType, bitset<SOLUTION_SIZE> chromosome, vector<bitset<ADDRESS_SIZE>> addressVector){
    ofstream simulation;
    simulation.open(crossoverType + "_Simulation/Simulation - " + name + ".txt");
    
    LRUCache cache;
    
    bitset<3> index;
    for (int i = 0; i < 100; i++){
        index[0] = chromosome[(i * 3)];
        index[1] = chromosome[(i * 3) + 1];
        index[2] = chromosome[(i * 3) + 2];
        cache.index((int)index.to_ulong(), addressVector.at(i));
        simulation << "Index: " << (int)index.to_ulong() << " (" << index.to_string() << ")";
        simulation << " | Address No. " << i + 1 << " | Address: " << Tools::addressToHex(addressVector.at(i)) << endl;
        simulation << cache.display();
        simulation << "********************************" << endl;
    }

    simulation.close();
}
/***********************************************************************************************************/

/***********************************************************************************************************/

int main() {
    // Generating 100 random 32-bit Addresses
    vector<bitset<ADDRESS_SIZE>> addressVector = Tools::randAddressVector();
    /*
    UX - Uniform Crossover
    2PX - Two Point Crossover
    SX - Segmented Crossover
    */

    // AV, crossoverType, Output - YES or NO?
    Tools::runGA(addressVector, "UX", "YES");
    Tools::runGA(addressVector, "2PX", "YES");
    Tools::runGA(addressVector, "SX", "YES");
    Tools::runGA(addressVector, "BAX", "YES");

    return 0;
}

================
File: genetic_algorithm.h
================
#ifndef GEN_ALG_H
#define GEN_ALG_H

// Includes
#include <bits/stdc++.h>
#include <stdlib.h>
#include <string>
#include <algorithm>
#include <vector>
#include <fstream>
#include <iostream>
#include <time.h>
#include <bitset>
#include <random>
// C program to create a folder
#include <conio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <cstring>
#include <filesystem>
#include <typeinfo>

using namespace std;

// Initial Definitions
#define POP_SIZE 100
#define ELITISM_PERCENTAGE 5 // What top percentage of the population should be carried from generation to generation
#define MUTATION_CHANCE 5 // As a percentage chance
#define MAX_GEN 400 // The max allowed generations
#define SOLUTION_SIZE 300
#define ADDRESS_SIZE 32
#define CONVERGENCE_ALLOWENCE 25 // The # of generations with no fitness change to declare as converged
#define NUM_EXECUTIONS 20
#define SEG_X_CHANCE 40 // chance to make a new crossover point for segmented crossover
const string genes = "10";
/***********************************************************************************************************/
class Genome {

    public:
        bitset<SOLUTION_SIZE> Chromosome;
        vector<bitset<ADDRESS_SIZE>> addressVector;
        int Fitness;
        int cal_fitness();
        Genome(bitset<SOLUTION_SIZE> chromosome, vector<bitset<ADDRESS_SIZE>> addressVector): Chromosome(chromosome), addressVector(addressVector), Fitness(cal_fitness()){};
        pair<Genome, Genome> UX(Genome mate);
        pair<Genome, Genome> TWOPX(Genome mate);
        pair<Genome, Genome> SX(Genome mate);
        pair<Genome, Genome> BAX(Genome mate);
        bool operator<(const Genome& GenomeB);
};
/***********************************************************************************************************/

/***********************************************************************************************************/
class GenAlg {

    public:
        vector<bitset<ADDRESS_SIZE>> addressVector;
        string crossoverType;
        int currentGen;
        int solFitness;
        string Name;
        vector<Genome> population;
        bool solutionFound;
        ofstream output;
        GenAlg(string name, vector<bitset<ADDRESS_SIZE>> addressVector, string crossoverType): Name(name), addressVector(addressVector), crossoverType(crossoverType){};
        void run();
        void runWithOF();
        string displayPop();
        string displaySolution();
        int getFitness(){return solFitness;};
        int getGen(){return currentGen;};
};
/***********************************************************************************************************/

/***********************************************************************************************************/
class Tools {

    public:
        static int randRange(int min, int max);
        static char randChar();
        static string newGenome();
        static string addressToHex(bitset<ADDRESS_SIZE> address);
        static void displayAddressVector(vector<bitset<ADDRESS_SIZE>> addressVector);
        static vector<bitset<ADDRESS_SIZE>> randAddressVector();
        static void runGA(vector<bitset<ADDRESS_SIZE>> addressVector, string crossoverType, string output);
};

/*******************************************************************************************************************************/
class LRUSet {
    // store keys of cache
    list<bitset<ADDRESS_SIZE>> set;
 
    // store references of key in cache
    unordered_map<bitset<ADDRESS_SIZE>, list<bitset<ADDRESS_SIZE>>::iterator> cacheMapping;
    int size; // maximum capacity of cache
 
public:
    LRUSet();
    bool refer(bitset<ADDRESS_SIZE>);
    string display();
};
/***********************************************************************************************************/

/*******************************************************************************************************************************/
class LRUCache {
    
    //int size; // maximum capacity of cache
    LRUSet setArray[8];
    int evictionCount = 0;
 
public:
    int getEvictionCount();
    LRUCache();
    string display();
    void index(int, bitset<ADDRESS_SIZE>);
    static void simulateCache(string, string, bitset<SOLUTION_SIZE>, vector<bitset<ADDRESS_SIZE>>);
};
/*******************************************************************************************************************************/


#endif // GEN_ALG_H

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Caleb

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
# Genetic Algorithm



## Getting started

To make it easy for you to get started with GitLab, here's a list of recommended next steps.

Already a pro? Just edit this README.md and make it your own. Want to make it easy? [Use the template at the bottom](#editing-this-readme)!

## Add your files

- [ ] [Create](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file) or [upload](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file) files
- [ ] [Add files using the command line](https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line) or push an existing Git repository with the following command:

```
cd existing_repo
git remote add origin https://gitlab.com/calebs-group/genetic-algorithm.git
git branch -M main
git push -uf origin main
```

## Integrate with your tools

- [ ] [Set up project integrations](https://gitlab.com/calebs-group/genetic-algorithm/-/settings/integrations)

## Collaborate with your team

- [ ] [Invite team members and collaborators](https://docs.gitlab.com/ee/user/project/members/)
- [ ] [Create a new merge request](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)
- [ ] [Automatically close issues from merge requests](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically)
- [ ] [Enable merge request approvals](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/)
- [ ] [Set auto-merge](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html)

## Test and Deploy

Use the built-in continuous integration in GitLab.

- [ ] [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/index.html)
- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)
- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)
- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)

***

# Editing this README

When you're ready to make this README your own, just edit this file and use the handy template below (or feel free to structure it however you want - this is just a starting point!). Thank you to [makeareadme.com](https://www.makeareadme.com/) for this template.

## Suggestions for a good README
Every project is different, so consider which of these sections apply to yours. The sections used in the template are suggestions for most open source projects. Also keep in mind that while a README can be too long and detailed, too long is better than too short. If you think your README is too long, consider utilizing another form of documentation rather than cutting out information.

## Name
Choose a self-explaining name for your project.

## Description
Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.

## Badges
On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.

## Visuals
Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.

## Installation
Within a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew. However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.

## Usage
Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.

## Support
Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.

## Roadmap
If you have ideas for releases in the future, it is a good idea to list them in the README.

## Contributing
State if you are open to contributions and what your requirements are for accepting them.

For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self.

You can also document commands to lint the code or run tests. These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.

## Authors and acknowledgment
Show your appreciation to those who have contributed to the project.

## License
For open source projects, say how it is licensed.

## Project status
If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.



================================================================
End of Codebase
================================================================
